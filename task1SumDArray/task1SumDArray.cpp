/*1. Знайти суму елементів матриці, які є додатні.  Кількість стовпців і рядків матриці повинен вводити користувач. За введеним даним, динамічно, повинна виділитися пам'ять під матрицю. Матрицю заповнювати випадковими значеннями,
як негативними так і позитивними.
Знайдіть суму елементів, які знаходяться на головній діагоналі.
Знайдіть суму елементів, які знаходяться на другорядній діагоналі.
Обчисліть суму елементів, які знаходяться під головною діагоналлю*/
#include <iostream>
#include <ctime>
#include <Windows.h>
using namespace std;
void divisionArr(int** matrix, int n, int m);//функція розподілу динамічної пам'яті
void inputArr(int** matrix, int n, int m);//функція для вводу елементів масиву
void printArr(int** matrix, int n, int m);//функція для виведення елементів масиву
void sumPositiveArr(int** matrix, int n, int m, int sum);//функція, в якій знаходимо суму елементів матриці, які є додатні.
void sumMainDiagonalArr(int** matrix, int n, int m, int sum);//функція, в якій знаходимо суму елементів, які знаходяться на головній діагоналі
void sumNotMainDiagonalArr(int** matrix, int n, int m, int sum);//функція, в якій знаходимо  суму елементів, які знаходяться на другорядній діагоналі 
void sumUnderMainDiagonalArr(int** matrix, int n, int m, int sum);//функція, в якій знаходимо  суму елементів, які знаходяться під головною діагоналлю
void deleteArr(int** matrix, int n, int m);//функція видалення масиву
int main()
{
    srand(time(NULL));//завдяки даній функції, рандомні числа будуть постійно змінюватись 
    SetConsoleCP(1251); // встановлення кодування Windows-1251 в  потік введення
    SetConsoleOutputCP(1251); // встановлення кодування Windows-1251 в  потік виведення
    int** matrix = nullptr;//вказівник масиву рівний 0
    int n = 0;//змінна - відповідає стовпцям масиву
    int m = 0;//змінна - відповідає рядкам масиву
    int sum = 0;//змінна -сума чисел
    matrix = new int* [n];//вказівник matrix вказує на new int* [n]
    cout << "Введіть число n" << endl;
    cin >> n;
    cout << "Введіть число m" << endl;
    cin >> m;
    divisionArr(matrix, n, m);//звертаємось до функції розподілу динамічної пам'яті
    inputArr(matrix, n, m);//звертаємось до функції для вводу елементів масиву
    cout << endl;
    printArr(matrix, n, m);//звертаємось до функції виведення елементів масиву
    cout << endl;
    cout << "Сума додатніх елементів масиву:" << endl;
    sumPositiveArr(matrix, n, m, sum);//звертаємось до функції, в якій знаходимо суму елементів матриці, які є додатні.
    cout << "Сума елементів масиву головної діагоналі:" << endl;
    sumMainDiagonalArr(matrix, n, m, sum);//звертаємось до функції,в якій знаходимо суму елементів, які знаходяться на головній діагоналі
    cout << "Сума елементів масиву другорядної діагоналі:" << endl;
    sumNotMainDiagonalArr(matrix, n, m, sum);//звертаємось до функції,в якій знаходимо  суму елементів, які знаходяться на другорядній діагоналі 
    cout << "Сума елементів масиву, які знаходяться під головною діагоналлю:" << endl;
    sumUnderMainDiagonalArr(matrix, n, m, sum);//звертаємось до функції,в якій знаходимо  суму елементів, які знаходяться під головною діагоналлю
    deleteArr(matrix, n, m);//звертаємось до функції видалення масиву
    delete[]matrix;//видаляємо matrix
}
void divisionArr(int** matrix, int n, int m) {//функція розподілу динамічної пам'яті
    for (int i = 0; i < n; i++)
    {
        matrix[i] = new int[m];
    }
}
void inputArr(int** matrix, int n, int m) {//функція для вводу елементів масиву
    for (int i = 0; i < n; i++)//використовуємо подвійний цикл для заповнення елементів масиву
    {
        for (int j = 0; j < m; j++)
        {
            matrix[i][j] = rand() % 30 - 10;// використовуємо рандомне заповнення елементів масиву- додатгими та від'ємними числами
        }
    }
}
void printArr(int** matrix, int n, int m) {//функція для виведення елементів масиву
    for (int i = 0; i < n; i++)//використовуємо подвійний цикл для виведення елементів масиву
    {
        for (int j = 0; j < m; j++)
        {
            cout << matrix[i][j] << "\t";//виведення елементів масиву
        }
        cout << endl;
    }
}

void sumPositiveArr(int** matrix, int n, int m, int sum) {//функція, в якій знаходимо суму елементів матриці, які є додатні.
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (matrix[i][j] > 0) {//ставимо умову- елементи масиву більші за 0- додатні
                sum += matrix[i][j];//знаходимо суму необхідних елементів масиву
            }
        }
    }
    cout << "sum =" << sum << endl;//виводимо шукану суму чисел
}
void sumMainDiagonalArr(int** matrix, int n, int m, int sum) {//функція, в якій знаходимо суму елементів, які знаходяться на головній діагоналі
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (j == i) {// індекси головноъ діагоналі однакові
                sum += matrix[i][j];//знаходимо суму необхідних елементів масиву
            }
        }
    }
    cout << "sum =" << sum << endl;//виводимо шукану суму чисел
}
void sumNotMainDiagonalArr(int** matrix, int n, int m, int sum) {//функція, в якій знаходимо  суму елементів, які знаходяться на другорядній діагоналі 
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            if (i + j == n - 1) {//у другорядній діагоналі сума індексів менша за  n на 1
                sum += matrix[i][j];//знаходимо суму необхідних елементів масиву
            }
        }
    }
    cout << "sum =" << sum << endl;//виводимо шукану суму чисел
}
void sumUnderMainDiagonalArr(int** matrix, int n, int m, int sum) {//функція, в якій знаходимо  суму елементів, які знаходяться під головною діагоналлю
    for (int i = 1; i < n; i++)//під головною діагоналлю i!=0
    {
        for (int j = 0; j < i; j++)//ставимо умову при якій j менше i
        {
            sum += matrix[i][j];//знаходимо суму необхідних елементів масиву
        }
    }
    cout << "sum =" << sum << endl;//виводимо шукану суму чисел
}
void deleteArr(int** matrix, int n, int m) {//функція видалення елементів масиву
    for (int i = 0; i < n; i++)
    {
        delete[]matrix[i];
    }
}